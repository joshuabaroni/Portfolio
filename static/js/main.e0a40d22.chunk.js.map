{"version":3,"sources":["entry_point/EntryPoint.module.css","menu/Menu.module.css","img/ProfilePicBaroni2016.jpg","menu/Menu.js","pages/TextOnly.js","entry_point/EntryPoint.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RenderNavs","props","navLinkComponents","sections","map","section","push","Nav","Link","className","classes","NavLink","href","console","log","Menu","Navbar","navbar","bg","expand","Brand","TextOnly","classTitle","src","img","alt","style","width","body","constants","name","title","LinkButton","EntryPoint","Home","BorderedDiv","ignore","Ignore","AboutMe","Headshot","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,QAAU,4BAA4B,YAAc,gCAAgC,WAAa,iC,mBCAnJD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,OAAS,qBAAqB,eAAe,2BAA2B,gBAAgB,4BAA4B,aAAa,2B,mBCDnLD,EAAOC,QAAU,IAA0B,kD,kQCIrCC,EAAa,SAACC,GAChB,IAAIC,EAAoB,GAOxB,OANAD,EAAME,SAASC,KAAI,SAAAC,GACfH,EAAkBI,KACd,kBAACC,EAAA,EAAIC,KAAL,CAAUC,UAAWC,IAAQC,QAASC,KAAI,UAAKP,IAAYA,IAE/DQ,QAAQC,IAAI,4BAA8BT,MAG1C,kBAACE,EAAA,EAAD,CAAKE,UAAU,QACVP,IAgBEa,EAXF,SAACd,GACV,OACI,6BACI,kBAACe,EAAA,EAAD,CAAQP,UAAWC,IAAQO,OAAQC,GAAG,QAAQC,OAAO,MACjD,kBAACH,EAAA,EAAOI,MAAR,CAAcR,KAAK,UACnB,kBAAC,EAAD,CAAYT,SAAUF,EAAME,cCF7BkB,EAhBE,SAAEpB,GACf,OACI,yBAAKQ,UAAWR,EAAMQ,WAClB,4BACKR,EAAMqB,YAEX,8BACI,yBAAKC,IAAKtB,EAAMuB,IAAKC,IAAK,yBAA0BC,MAAO,CAACC,MAAO,SACnE,2BACK1B,EAAM2B,S,iBCRrBC,EAAY,CACdC,KAAM,gBACNC,MAAO,sBACP5B,SAAU,CACN,OACA,WACA,SACA,WACA,eAIF6B,EAAa,SAAC/B,GAEhB,OADAY,QAAQC,IAAIb,EAAMW,MAElB,kBAAC,IAAD,KACE,uBAAGA,KAAMX,EAAMW,MACb,4BAAQH,UAAWC,IAAQsB,YACvB,gCAAS/B,EAAM6B,UAkCZG,E,uKAzBP,OACA,yBAAKxB,UAAWC,IAAQwB,MACpB,kBAAC,EAAD,CAAM/B,SAAU0B,EAAU1B,WAC1B,4BAAK0B,EAAUC,KAAf,KAAuBD,EAAUE,OACjC,kBAAC,EAAD,CAAYD,KAAM,SAAUlB,KAAK,oCACjC,kBAAC,EAAD,CAAYkB,KAAM,WAAYlB,KAAK,yDACnC,kBAAC,EAAD,CAAYkB,KAAM,WAAYlB,KAAK,4DACnC,yBAAKH,UAAWC,IAAQyB,aACpB,kBAAC,EAAD,CAAUC,OAAQ1B,IAAQ2B,OACtB5B,UAAWC,IAAQ4B,QACnBhB,WAAYO,EAAU1B,SAAS,GAC/BqB,IAAKe,IACLX,KAAI,id,GAdCY,aCpBVC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.e0a40d22.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"EntryPoint_Home__2XQwI\",\"AboutMe\":\"EntryPoint_AboutMe__3dg8Q\",\"BorderedDiv\":\"EntryPoint_BorderedDiv__2hydP\",\"LinkButton\":\"EntryPoint_LinkButton__3ufBN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLink\":\"Menu_NavLink__9JLxN\",\"navbar\":\"Menu_navbar__2k2K1\",\"navbar-brand\":\"Menu_navbar-brand__3SODX\",\"navbar-toggle\":\"Menu_navbar-toggle__1v0eG\",\"navbar-nav\":\"Menu_navbar-nav__2M80z\"};","module.exports = __webpack_public_path__ + \"static/media/ProfilePicBaroni2016.5bae192a.jpg\";","import React from 'react'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport classes from './Menu.module.css'\r\n\r\nconst RenderNavs = (props) => {\r\n    let navLinkComponents = [];\r\n    props.sections.map(section => {\r\n        navLinkComponents.push(\r\n            <Nav.Link className={classes.NavLink} href={`${section}`}>{section}</Nav.Link>\r\n        )\r\n        console.log(\"NavLink component added: \" + section)\r\n    })\r\n    return (\r\n        <Nav className=\"Menu\">\r\n            {navLinkComponents /* how to render all components in array*/}\r\n        </Nav>\r\n    )\r\n}\r\n\r\nconst Menu = (props) => {\r\n    return (\r\n        <div>\r\n            <Navbar className={classes.navbar} bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#root\">{/*TODO logo img here*/}</Navbar.Brand>\r\n                <RenderNavs sections={props.sections}/>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React from 'react'\r\n\r\n/**\r\n * Template for pages containing only text, auch as about me\r\n * @param {*contains pagename} props \r\n */\r\nconst TextOnly = ( props ) => {\r\n    return (\r\n        <div className={props.className}>\r\n            <h2>\r\n                {props.classTitle}\r\n            </h2>\r\n            <body>\r\n                <img src={props.img} alt={\"Joshua Baroni Headshot\"} style={{width: \"60%\"}}/>\r\n                <p>\r\n                    {props.body}\r\n                </p>\r\n            </body>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TextOnly;","import React, {Component} from 'react';\r\nimport classes from './EntryPoint.module.css';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport Menu from '../menu/Menu.js'\r\nimport TextOnly from '../pages/TextOnly.js'\r\nimport Headshot from '../img/ProfilePicBaroni2016.jpg'\r\n\r\nconst constants = {\r\n    name: \"Joshua Baroni\",\r\n    title: \"FullStack Developer\",\r\n    sections: [\r\n        \"Home\",\r\n        \"About Me\",\r\n        \"Resume\",\r\n        \"Projects\",\r\n        \"Contact Me\"\r\n    ]\r\n}\r\n\r\nconst LinkButton = (props) => {\r\n    console.log(props.href)\r\n    return (\r\n    <Router>\r\n      <a href={props.href}>\r\n        <button className={classes.LinkButton}>\r\n            <strong>{props.name}</strong>\r\n        </button>\r\n      </a>\r\n    </Router>\r\n    )\r\n  }\r\n\r\nclass EntryPoint extends Component {\r\n    render() {\r\n        return (\r\n        <div className={classes.Home}>\r\n            <Menu sections={constants.sections}/>\r\n            <h1>{constants.name}: {constants.title}</h1>\r\n            <LinkButton name={\"Github\"} href=\"https://github.com/joshuabaroni\" />\r\n            <LinkButton name={\"LinkedIn\"} href=\"https://www.linkedin.com/in/joshua-baroni-b50580177/\" />\r\n            <LinkButton name={\"Facebook\"} href=\"https://www.facebook.com/profile.php?id=100020207475034\" />\r\n            <div className={classes.BorderedDiv}>\r\n                <TextOnly ignore={classes.Ignore/* todo needs formatting */}\r\n                    className={classes.AboutMe}\r\n                    classTitle={constants.sections[1]}\r\n                    img={Headshot}\r\n                    body={`Hi, my name is Josh Baroni and welcome to my website!\r\n                    Graduating from CNU's Class of 2020 with a B.S. in Computer Science,\r\n                    I am currently new to the industry and am finding what specific type\r\n                    of data architecture and design I am most interested in pursuing. In the\r\n                    meantime, feel free to check out some of the projects I've worked on over\r\n                    the years.`}\r\n                />\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EntryPoint;","import React from 'react';\nimport './App.css';\nimport EntryPoint from './entry_point/EntryPoint.js'\n\nfunction App() {\n  return (\n    <div>\n      <EntryPoint />      \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}